version: '3.8'

services:
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql://station_user:${POSTGRES_PASSWORD}@db:5432/station_ops
      - SECRET_KEY=${SECRET_KEY}
      - CORS_ORIGINS_STR=${FRONTEND_URL}
    volumes:
      - backend_data:/app/data
    depends_on:
      db:
        condition: service_healthy
    networks:
      - station-network
    restart: unless-stopped

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.prod
    ports:
      - "80:80"
      - "443:443"
    environment:
      - REACT_APP_API_URL=${BACKEND_URL}
    depends_on:
      - backend
    networks:
      - station-network
    restart: unless-stopped

  db:
    image: postgres:15
    environment:
      - POSTGRES_DB=station_ops
      - POSTGRES_USER=station_user
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backups:/backups
    networks:
      - station-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U station_user -d station_ops"]
      interval: 30s
      timeout: 10s
      retries: 3

  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
    depends_on:
      - frontend
      - backend
    networks:
      - station-network
    restart: unless-stopped

volumes:
  postgres_data:
  backend_data:

networks:
  station-network:
    driver: bridge